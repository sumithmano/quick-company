{"version":3,"sources":["components/CompanyItem.js","components/Company.js","components/About.js","components/Main.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["CompanyItem","props","className","item","name","Company","state","companyList","this","getCompanyList","axios","get","then","response","setState","data","catch","err","console","log","map","key","Component","About","Main","exact","path","component","Navbar","onSideClose","bind","M","Sidenav","init","sidenav","getInstance","close","href","data-target","to","onClick","ref","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6QAMeA,EAJK,SAACC,GAAD,OAChB,wBAAIC,UAAU,mBAAmBD,EAAME,KAAKC,OCqCjCC,E,kDAjCX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,YAAa,IAHF,E,gEAQfC,KAAKC,mB,uCAGS,IAAD,OACbC,IAAMC,IAAI,uCACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAEP,YAAaM,EAASE,UAEzCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAGxB,IACEV,EAAgBC,KAAKF,MAArBC,YACR,OACI,wBAAIL,UAAU,cAENK,EAAYa,KAAI,SAAAjB,GAAI,OAChB,kBAAC,EAAD,CAAaA,KAAMA,EAAMkB,IAAKlB,EAAKC,e,GA3BrCkB,aCCPC,EAJD,kBACV,6BAAK,uCCYMC,EATF,kBACT,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,SAASC,UAAWJ,O,QCqCnCK,E,kDAxCX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACD4B,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,gEAMfC,EAAEC,QAAQC,KAAKzB,KAAK0B,W,oCAILH,EAAEC,QAAQG,YAAY3B,KAAK0B,SACjCE,U,+BAIH,IAAD,OACL,OACI,6BACI,yBAAKlC,UAAU,iBACX,yBAAKA,UAAU,eACX,uBAAGmC,KAAK,IAAInC,UAAU,qBAAtB,iBACA,uBAAGoC,cAAY,YAAYpC,UAAU,iCACjC,uBAAGA,UAAU,gBAEjB,wBAAIA,UAAU,4BACV,4BAAI,kBAAC,IAAD,CAAMqC,GAAG,KAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,aAKhB,wBAAIC,QAAShC,KAAKqB,YAAaY,IAAM,SAACP,GAAa,EAAKA,QAAUA,GAAWhC,UAAU,UAAUwC,GAAG,aAChG,4BAAI,kBAAC,IAAD,CAAMH,GAAG,KAAI,uBAAGrC,UAAU,mBAA1B,YACJ,4BAAI,kBAAC,IAAD,CAAMqC,GAAG,UAAS,uBAAGrC,UAAU,0BAA/B,gB,GAnCHoB,aCWNqB,G,MAXH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKzC,UAAU,aACb,kBAAC,EAAD,UCEY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.70cb8cef.chunk.js","sourcesContent":["import React from 'react'\n\nconst CompanyItem = (props) => (\n    <li className=\"collection-item\">{props.item.name}</li>\n)\n\nexport default CompanyItem","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport CompanyItem from './CompanyItem'\n\nclass Company extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            companyList: []\n        }\n    }\n\n    componentDidMount() {\n        this.getCompanyList()\n    }\n\n    getCompanyList() {\n        axios.get('http://localhost:3000/api/companies')\n            .then(response => {\n                this.setState({ companyList: response.data })\n            })\n            .catch(err => console.log(err))\n    }\n\n    render() {\n        const { companyList } = this.state\n        return (\n            <ul className=\"collection\">\n                {\n                    companyList.map(item => (\n                        <CompanyItem item={item} key={item.name}></CompanyItem>\n                    ))\n                }\n            </ul>\n        )\n    }\n}\n\nexport default Company\n","import React from 'react'\n\nconst About = () => (\n    <div><h1>About</h1></div>\n)\n\nexport default About ","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Company from './Company'\nimport About from './About'\n\nconst Main = () => (\n    <main>\n        <Switch>\n            <Route exact path='/' component={Company} />\n            <Route exact path='/about' component={About} />\n        </Switch>\n    </main>\n)\n\nexport default Main","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\n/* global M */\n\nclass Navbar extends Component {\n\n    constructor(props) {\n        super(props)\n        this.onSideClose = this.onSideClose.bind(this);\n    }\n\n    componentDidMount() {\n        M.Sidenav.init(this.sidenav)\n    }\n\n    onSideClose() {\n        var instance = M.Sidenav.getInstance(this.sidenav)\n        instance.close()\n    }\n\n\n    render() {\n        return (\n            <div>\n                <nav className=\"blue darken-3\">\n                    <div className=\"nav-wrapper\">\n                        <a href=\"/\" className=\"brand-logo center\">Quick Company</a>\n                        <a data-target=\"main-menu\" className=\"sidenav-trigger show-on-large\">\n                            <i className=\"fa fa-bars\"></i>\n                        </a>\n                        <ul className=\"right hide-on-small-only\">\n                            <li><Link to=\"/\">Company</Link></li>\n                            <li><Link to=\"/about\">About</Link></li>\n                        </ul>\n                    </div>\n                </nav>\n\n                <ul onClick={this.onSideClose} ref={ (sidenav) => {this.sidenav = sidenav} } className=\"sidenav\" id=\"main-menu\">\n                    <li><Link to=\"/\"><i className=\"fa fa-suitcase\"></i>Company</Link></li>\n                    <li><Link to=\"/about\"><i className=\"fa fa-question-circle\"></i>About</Link></li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Navbar\n","import React from 'react';\nimport Main from './components/Main'\nimport Navbar from './components/Navbar'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <div className=\"container\">\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}